import{ag as R,r as d,h as A,j as F}from"./index.dc551ac6.js";import{d as t}from"./dexie.8617b804.js";import{i18n as U}from"./i18n.2b9c7e98.js";import{v as x}from"./fuelConsumption.d2d2c6e8.js";import{u as M}from"./settingsStore.6d20ebcd.js";function h(){const{t:e}=U.global;return[{id:1,distanceUnit:e("distanceUnits.kilometersShort"),fuelUnit:e("fuelUnits.litre"),fuelConsumptionUnit:e("fuelConsumptionsUnits.litresPer100km"),distanceConversion:1,fuelUnitConversion:1},{id:2,distanceUnit:e("distanceUnits.milesShort"),fuelUnit:e("fuelUnits.gallon"),fuelConsumptionUnit:e("fuelConsumptionsUnits.mpgUs"),distanceConversion:1,fuelUnitConversion:1},{id:3,distanceUnit:"Miles",fuelUnit:e("fuelUnits.gallon"),fuelConsumptionUnit:e("fuelConsumptionsUnits.mpgImperial"),distanceConversion:1,fuelUnitConversion:1},{id:4,distanceUnit:e("distanceUnits.kilometersShort"),fuelUnit:e("fuelUnits.kWh"),fuelConsumptionUnit:e("fuelConsumptionsUnits.kWhPer100km"),distanceConversion:1,fuelUnitConversion:1},{id:5,distanceUnit:e("distanceUnits.kilometersShort"),fuelUnit:e("fuelUnits.wh"),fuelConsumptionUnit:e("fuelConsumptionsUnits.whPer100km"),distanceConversion:1,fuelUnitConversion:1},{id:6,distanceUnit:e("distanceUnits.milesShort"),fuelUnit:e("fuelUnits.wh"),fuelConsumptionUnit:e("fuelConsumptionsUnits.whPerMile"),distanceConversion:1,fuelUnitConversion:1}]}function b(){const{t:e}=U.global;return[{id:1,name:e("periods.week"),periodInDays:7},{id:2,name:e("periods.threeMonths"),periodInDays:90},{id:3,name:e("periods.sixMonths"),periodInDays:180},{id:4,name:e("periods.year"),periodInDays:365},{id:5,name:e("periods.max"),periodInDays:0}]}const z=R("refuelStore",()=>{const e=M(),u=d([]),l=d([]);async function m(n){u.value=await r(n)}async function r(n){return await t.refuels.where("vehicleId").equals(n).toArray()}async function p(n){var s;return e.selectedVehicleId?(s=(await r(e.selectedVehicleId)).find(o=>o.id==n))!=null?s:null:void 0}async function v(n){return await t.refuels.add(n)}async function w(n){await t.refuels.put(n)}async function y(n){await t.refuels.delete(n)}async function g(){l.value=await c()}async function c(){const n=await t.vehicles.toArray();for(const i of n){const s=await r(i.id);s.length>0&&(i.refuels=[],s.forEach(o=>{var a;return(a=i.refuels)==null?void 0:a.push(o)}),i.fuelUnit=await f(i.fuelUnitId))}return n}async function C(n){var o;const s=(o=(await c()).find(a=>a.id==n))!=null?o:null;return s||null}function S(){const n=new Array;return l.value.forEach(i=>n.push({...i,fuelConsumption:(x(i).toFixed(2)||"").toString()})),n}async function V(n){await t.vehicles.add(n),await t.vehicles.count()===1&&e.changeSelectedVehicle(n)}async function I(n){await t.vehicles.put(n)}async function P(n){await t.transaction("rw",[t.vehicles,t.refuels,t.settings],async()=>{if((await t.refuels.where("vehicleId").equals(n).toArray()).forEach(s=>{(async()=>await t.refuels.delete(s.id))()}),await t.vehicles.delete(n),await t.vehicles.count()>0){const s=await t.vehicles.toArray();e.changeSelectedVehicle(s[0]);return}e.changeSelectedVehicle(null)})}async function k(){return await Promise.resolve(b())}async function D(){return await Promise.resolve(h())}async function f(n){return await Promise.resolve(h().filter(i=>i.id===n)[0])}return{refuels:u,vehicles:l,readRefuels:m,getRefuel:p,addRefuel:v,updateRefuel:w,deleteRefuel:y,readVehicles:g,getVehicle:C,getAllVehicleData:S,addVehicle:V,updateVehicle:I,deleteVehicle:P,getPeriods:k,getFuelUnits:D,getFuelUnit:f}}),q=A("div",{class:"q-space"});var B=F({name:"QSpace",setup(){return()=>q}});export{B as Q,z as u};
