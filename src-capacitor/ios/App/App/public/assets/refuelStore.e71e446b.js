import{k as R,r as d}from"./index.af9e0f6e.js";import{d as i}from"./dexie.e9b82229.js";import{i18n as U}from"./i18n.a8414de4.js";import{v as A}from"./fuelConsumption.8f4bd1ed.js";import{u as F}from"./settingsStore.5309004a.js";function h(){const{t:e}=U.global;return[{id:1,distanceUnit:e("distanceUnits.kilometersShort"),fuelUnit:e("fuelUnits.litre"),fuelConsumptionUnit:e("fuelConsumptionsUnits.litresPer100km"),distanceConversion:1,fuelUnitConversion:1},{id:2,distanceUnit:e("distanceUnits.milesShort"),fuelUnit:e("fuelUnits.gallon"),fuelConsumptionUnit:e("fuelConsumptionsUnits.mpgUs"),distanceConversion:1,fuelUnitConversion:1},{id:3,distanceUnit:"Miles",fuelUnit:e("fuelUnits.gallon"),fuelConsumptionUnit:e("fuelConsumptionsUnits.mpgImperial"),distanceConversion:1,fuelUnitConversion:1},{id:4,distanceUnit:e("distanceUnits.kilometersShort"),fuelUnit:e("fuelUnits.kWh"),fuelConsumptionUnit:e("fuelConsumptionsUnits.kWhPer100km"),distanceConversion:1,fuelUnitConversion:1},{id:5,distanceUnit:e("distanceUnits.kilometersShort"),fuelUnit:e("fuelUnits.wh"),fuelConsumptionUnit:e("fuelConsumptionsUnits.whPer100km"),distanceConversion:1,fuelUnitConversion:1},{id:6,distanceUnit:e("distanceUnits.milesShort"),fuelUnit:e("fuelUnits.wh"),fuelConsumptionUnit:e("fuelConsumptionsUnits.whPerMile"),distanceConversion:1,fuelUnitConversion:1}]}function x(){const{t:e}=U.global;return[{id:1,name:e("periods.week"),periodInDays:7},{id:2,name:e("periods.threeMonths"),periodInDays:90},{id:3,name:e("periods.sixMonths"),periodInDays:180},{id:4,name:e("periods.year"),periodInDays:365},{id:5,name:e("periods.max"),periodInDays:0}]}const $=R("refuelStore",()=>{const e=F(),u=d([]),a=d([]);async function m(n){u.value=await r(n)}async function r(n){return await i.refuels.where("vehicleId").equals(n).toArray()}async function p(n){var s;return e.selectedVehicleId?(s=(await r(e.selectedVehicleId)).find(o=>o.id==n))!=null?s:null:void 0}async function v(n){return await i.refuels.add(n)}async function w(n){await i.refuels.put(n)}async function y(n){await i.refuels.delete(n)}async function g(){a.value=await c()}async function c(){const n=await i.vehicles.toArray();for(const t of n){const s=await r(t.id);s.length>0&&(t.refuels=[],s.forEach(o=>{var l;return(l=t.refuels)==null?void 0:l.push(o)}),t.fuelUnit=await f(t.fuelUnitId))}return n}async function C(n){var o;const s=(o=(await c()).find(l=>l.id==n))!=null?o:null;return s||null}function S(){const n=new Array;return a.value.forEach(t=>n.push({...t,fuelConsumption:(A(t).toFixed(2)||"").toString()})),n}async function V(n){await i.vehicles.add(n),await i.vehicles.count()===1&&e.changeSelectedVehicle(n)}async function I(n){await i.vehicles.put(n)}async function k(n){await i.transaction("rw",[i.vehicles,i.refuels,i.settings],async()=>{if((await i.refuels.where("vehicleId").equals(n).toArray()).forEach(s=>{(async()=>await i.refuels.delete(s.id))()}),await i.vehicles.delete(n),await i.vehicles.count()>0){const s=await i.vehicles.toArray();e.changeSelectedVehicle(s[0]);return}e.changeSelectedVehicle(null)})}async function P(){return await Promise.resolve(x())}async function D(){return await Promise.resolve(h())}async function f(n){return await Promise.resolve(h().filter(t=>t.id===n)[0])}return{refuels:u,vehicles:a,readRefuels:m,getRefuel:p,addRefuel:v,updateRefuel:w,deleteRefuel:y,readVehicles:g,getVehicle:C,getAllVehicleData:S,addVehicle:V,updateVehicle:I,deleteVehicle:k,getPeriods:P,getFuelUnits:D,getFuelUnit:f}});export{$ as u};
